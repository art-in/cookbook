match .recipe-list ns-view-add-class {
  " recipe-list"
}

/* TODO: do not duplicate items between async stub and main layout */

match .recipe-list ns-view-async-content {
  <div class="recipe-list__header">
    
    apply . btn ("ADD", "", "", "disabled", "Add new recipe")

    sortButtons = (
      apply . btn ("by alphabet", "by-alphabet", "", "disabled")
      apply . btn ("by complexity", "by-complexity", "", "disabled")
      apply . btn ("by popularity", "by-popularity", "", "disabled")
    )
    apply . btn-group (sortButtons, "recipe-list__sorters")
  </div>
  <div class="recipe-list__items ns-view-container-desc">
    apply . waiter
  </div>
}

match .recipe-list ns-view-content {
  <div class="recipe-list__header">
    
    apply . btn ("ADD", "", "", "disabled", "Add new recipe")

    sortProp = model('recipe-list').sortProp
    sortButtons = (
      apply . btn ("by alphabet", "by-alphabet", sortProp === 'name' ? "active" : "")
      apply . btn ("by complexity", "by-complexity", sortProp === 'complexity' ? "active" : "")
      apply . btn ("by popularity", "by-popularity", sortProp === 'popularity' ? "active" : "")
    )
    apply . btn-group (sortButtons, "recipe-list__sorters")
  </div>
  <div class="recipe-list__items ns-view-container-desc">
    if model('recipe-list').recipes.items {
      apply . ns-view-collection
    } else {
      @class += " recipe-list__empty"
      "No recipes yet"
    }

    if model('recipe-list').isLoading {
      apply . waiter
    }
  </div>
  <div class="recipe-list__footer">
    
    currentPage = model('recipe-list').currentPage
    pageButtons = for model('recipe-list').pages {
      apply . btn (
        scalar(.text), 
        "page", 
        .id === currentPage ? "active" : "",
        .id === currentPage ? "disabled" : ""
      )
    }

    apply . btn-group (pageButtons, "recipe-list__pages")
  </div>
}